import pandas as pd
import math
import argparse
import datetime
parser = argparse.ArgumentParser()

parser.add_argument('--still-seconds', type=float, action="store", help="still seconds before launch", 
            default=5)

parser.add_argument('--grim-millivolts', type=float, action="store", help="voltage going into grim reefer ina260. in millivolts", 
            default=3000)

parser.add_argument('--grim-milliamps', type=float, action="store", help="current going into grim reefer ina260. in milliamps", 
            default=1500)

parser.add_argument('--load-cell-millivolts', type=float, action="store", help="voltage going into load cell ina260. in millivolts", 
            default=5000)

parser.add_argument('--load-cell-milliamps', type=float, action="store", help="current going into load cell ina260. in milliamps", 
            default=1500)

parser.add_argument('--cam-millivolts', type=float, action="store", help="voltage going into cam ina260. in millivolts", 
            default=5000)

parser.add_argument('--cam-milliamps', type=float, action="store", help="current going into cam ina260. in milliamps", 
            default=1500)

parser.add_argument("infile", type=str, help="the csv file to read data from. Exported from OpenRocket. Ask your analysis lead. The csv should be of the form 'Time (s),Altitude (ft),Vertical velocity (ft/s),Vertical acceleration (ft/s²),Total velocity (ft/s),Total acceleration (ft/s²),Lateral distance (ft),Lateral velocity (ft/s),Lateral acceleration (ft/s²)'")
parser.add_argument("outfile", type=str, help="path to a C file that will contain the test data to be compiled")

args = parser.parse_args()

print("parsed")

in_file = args.infile
out_file = args.outfile

# Time to wait before starting open rocket flight
seconds_still_before_launch = args.still_seconds


# Data not covered in openrocket data
grim_voltage_mv = args.grim_millivolts
grim_current_ma = args.grim_milliamps

load_cell_voltage_mv = args.load_cell_millivolts
load_cell_current_ma = args.load_cell_milliamps

cam_voltage_mv = args.cam_millivolts
cam_current_ma = args.cam_milliamps


def adc_data(time: float) -> int:
    return int(math.sin(time)*5000)

df = pd.read_csv(in_file,
                comment='#',
                header=None,
                names=["time", "altitude", "vert_vel", "vert_acc", "total_vel", "total_acc", "lat_dist", "lat_vel", "lat_acc"])



structdef = '''
struct test_data {
    // Simulation Data
    uint64_t timestamp_us;

    float altitude_ft;

    float vert_vel_ft_s;
    float vert_acc_ft_s2;

    float total_vel_ft_s;
    float total_acc_ft_s;

    float lat_vel_ft_s;
    float lat_acc_ft_s2;


    // Standin data
    uint32_t adc_reading;

    uint16_t grim_voltage_mv;
    uint16_t grim_current_ma;

    uint16_t load_cell_voltage_mv;
    uint16_t load_cell_current_ma;

    uint16_t cam_voltage_mv;
    uint16_t cam_current_ma;
     
};
'''

file_contents = f'''// Autogenerated {datetime.datetime.now()} from {in_file}
#include <stdint.h>

''' + structdef + '''
struct test_data[] = {\n
'''

useconds_per_second = 1000000

for row in df.itertuples():
    time_us = int((seconds_still_before_launch + row.time) * useconds_per_second)
    line = f"\t{{ {time_us}, {row.altitude}, {row.vert_vel}, {row.vert_acc}, {row.total_vel}, {row.total_acc}, {row.lat_dist}, {row.lat_vel}, {row.lat_acc}, {adc_data(row.time)}, {grim_voltage_mv}, {grim_current_ma}, {load_cell_voltage_mv}, {load_cell_current_ma}, {cam_voltage_mv}, {cam_current_ma} }},\n"
    file_contents+=line

file_contents+="};"

with open(out_file, 'w') as f:
    f.write(file_contents)
print("finished")